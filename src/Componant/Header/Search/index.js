"use client";
import Link from "next/link";
import * as H from "./index.style";
import { useState, useRef, useEffect } from "react";
import { searchTermState } from "../../../state/searchState";
import { useRecoilState, useSetRecoilState } from "recoil";
import { searchResultsState } from "../../../state/searchResultState";

export default function SearchComponent() {
  //Ï∂îÏ≤úÍ≤ÄÏÉâÏñ¥
  const [searchKeywords, setSearchKeywords] = useState([
    "ÌñáÎ∞ò",
    "ÏªµÎ∞•",
    "Í≥ºÏûê",
    "ÏùåÎ£åÏàò",
  ]);

  const [recommendKeywords, setRecommendKeywords] = useState([
    "Í∞ÄÎøêÌïúÎÅº ÌòÑÎØ∏Î∞• 150G",
    "ÎßõÏûàÎäî Ïò§ÎöúÍ∏∞Î∞• (210GX3) 3Í∞ú Í≥®ÎùºÎã¥Í∏∞",
    "ÏßÑÎùºÎ©¥ Îß§Ïö¥Îßõ (120GX5)",
    "ÏªµÎ∞• 4Í∞ú Í≥®ÎùºÎã¥Í∏∞",
    "Ï∞∏Íπ®ÎùºÎ©¥ Ïö©Í∏∞ 110G",
    "ÏªµÎ∞• ÌÜ°ÌÜ°ÍπÄÏπòÏïåÎ∞•(Ï¶ùÎüâ) 222G",
    "ÏªµÎ∞• Ï∞®ÎèåÍ∞ïÎêúÏû•Î≥¥Î¶¨Î∞•(Ï¶ùÎüâ) 310G",
    "ÏªµÎ∞• Ï∞∏ÏπòÎßàÏöîÎçÆÎ∞•(Ï¶ùÎüâ) 247G",
    "ÏªµÎ∞• ÏßÑÌïúÏá†Í≥†Í∏∞ÎØ∏Ïó≠Íµ≠Î∞•(Ï¶ùÎüâ) 314G",
    "ÏªµÎ∞• ÍπÄÏπòÏ∞∏ÏπòÎçÆÎ∞•(Ï¶ùÎüâ) 310G",
  ]);

  const [PopularKeywords, setPopularKeywords] = useState([
    "ÎùºÎ©¥",
    "Ïò§ÎöúÍ∏∞Î∞•",
    "ÏªµÎ∞•",
    "ÌîºÏûê",
    "ÏªµÎàÑÎì§",
    "Ïπ¥Î†à",
    "Ï∞∏Ïπò",
    "ÏßÑÎùºÎ©¥",
    "Î∞•",
    "ÎßåÎëê",
  ]);

  // input ÌÅ¥Î¶≠Ïãú Ï∞ΩÎùÑÏö∞ÎäîÍ±∞
  const [isDropdownVisible, setDropdownVisible] = useState(false);
  const wrapperRef = useRef(null);

  const handleInputClick = () => {
    setDropdownVisible(true);
  };

  const handleOutsideClick = (event) => {
    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
      setDropdownVisible(false);
    }
  };

  useEffect(() => {
    document.addEventListener("mousedown", handleOutsideClick);

    return () => {
      document.removeEventListener("mousedown", handleOutsideClick);
    };
  }, []);

  const [keyword, setKeyword] = useState(""); // keyword ÏÉÅÌÉú Ï∂îÍ∞Ä

  const [searchTerm, setSearchTermValue] = useRecoilState(searchTermState);

  const setSearchResults = useSetRecoilState(searchResultsState); // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò

  //inputÎÇ¥Î∂ÄÏùò Í≤ÄÏÉâÏñ¥ ÏÇ≠Ï†úÎ≤ÑÌäº
  const Today = new Date();

  const onClickDelete = (index) => {
    const newArray = [...searchKeywords];
    const result = newArray.filter((_, el) => el !== index);
    setSearchKeywords(result);
  };

  const onClickAllDelete = () => {
    const newArray = [];
    setSearchKeywords(newArray);
  };

  //inputÍ∞í Í∞êÏßÄ Ìï®Ïàò
  const onChangeInput = (event) => {
    setSearchTermValue(event.target.value);
    setKeyword(event.target.value);
  };

  //Í≤ÄÏÉâÍ∏∞Îä• Ìï®Ïàò
  const onClickSearch = async (event) => {
    event.preventDefault();

    try {
      const productsRef = collection(db, "product");
      const q = query(
        productsRef,
        where("name", ">=", keyword),
        where("name", "<=", keyword + "\uf8ff")
      );

      const snapshot = await getDocs(q);
      const results = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      setSearchResults((prev) => [...prev, ...results]); //Î¶¨ÏΩîÏùºÎ°ú Í≤∞Í≥ºÍ∞í Îã¥Í∏∞
      router.push("/front/product/search/" + searchTerm); //ÌéòÏù¥ÏßÄ Ïù¥Îèô

      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };

  return (
    <>
      <H.Search>
        <H.InputWrapper>
          <form ref={wrapperRef} onSubmit={onClickSearch}>
            <input
              type="text"
              placeholder="ÎùºÎ©¥ÏùÄ Ïó≠Ïãú Ïò§ÎöúÍ∏∞ ÎùºÎ©¥~üçú"
              onClick={handleInputClick}
              onChange={onChangeInput}
            />
            <button type="submit" />
          </form>
        </H.InputWrapper>

        <H.SearchWrapper isDropdownVisible={isDropdownVisible}>
          {searchKeywords.length == 0 || (
            <H.RecentWrapper>
              <div>
                <h4>ÏµúÍ∑º Í≤ÄÏÉâÏñ¥</h4>
                <button onClick={onClickAllDelete}>Ï†ÑÏ≤¥ ÏÇ≠Ï†ú</button>
              </div>
              <ul>
                {searchKeywords?.map((el, index) => (
                  <li key={index}>
                    <Link href="/main">
                      <a>{el}</a>
                    </Link>
                    <button onClick={() => onClickDelete(index)} />
                  </li>
                ))}
              </ul>
            </H.RecentWrapper>
          )}

          <H.RecommendedWrapper>
            <h4>Ï∂îÏ≤ú Í≤ÄÏÉâÏñ¥</h4>
            <ul>
              {recommendKeywords?.map((el, index) => (
                <li key={index}>
                  <Link href="/main">
                    <a>{el.length > 17 ? el.substr(0, 16) + "..." : el}</a>
                  </Link>
                </li>
              ))}
            </ul>
          </H.RecommendedWrapper>

          <H.PopularWrapper>
            <div>
              <h4>Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥</h4>
              <span>{Today.toLocaleDateString()}Í∏∞Ï§Ä</span>
            </div>
            <ul>
              {PopularKeywords?.map((el, index) =>
                index <= 2 ? (
                  <li key={index}>
                    <H.KeywordsTop3>{index + 1}</H.KeywordsTop3>
                    <Link href="/main">
                      <a>{el}</a>
                    </Link>
                  </li>
                ) : (
                  <li key={index}>
                    <H.KeywordsIndex>{index + 1}</H.KeywordsIndex>
                    <Link href="/main">
                      <a>{el}</a>
                    </Link>
                  </li>
                )
              )}
            </ul>
          </H.PopularWrapper>
        </H.SearchWrapper>
      </H.Search>
    </>
  );
}
